<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://pennymac.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://pennymac.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pennymac.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-03-13T10:05:20-07:00</updated><id>https://pennymac.github.io//</id><title type="html">LevelUp</title><subtitle>This is a blog and/or wiki for Central App Dev to share knowledge with each other.
</subtitle><entry><title type="html">Part 1 Building Financial Intelligence Part 2 Business and Automation</title><link href="https://pennymac.github.io/Part-One-building-financial-intelligence-Part-Two-business-and-automation" rel="alternate" type="text/html" title="Part 1 Building Financial Intelligence Part 2 Business and Automation" /><published>2018-01-27T00:00:00-08:00</published><updated>2018-01-27T00:00:00-08:00</updated><id>https://pennymac.github.io/Part-One-building-financial-intelligence-Part-Two-business-and-automation</id><content type="html" xml:base="https://pennymac.github.io/Part-One-building-financial-intelligence-Part-Two-business-and-automation"></content><category term="jekyll" /><category term="markdown" /><category term="yaml" /><summary type="html">Did you miss our Financial Intelligence, Business and Automation LevelUp? Fear not, we recorded it for you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/photos/w7ZyuGYNpRQ/500x300" /></entry><entry><title type="html">Authenticating to AWS from the command line</title><link href="https://pennymac.github.io/cli-aws-saml-authentication" rel="alternate" type="text/html" title="Authenticating to AWS from the command line" /><published>2017-03-30T00:00:00-07:00</published><updated>2017-03-30T00:00:00-07:00</updated><id>https://pennymac.github.io/cli-aws-saml-authentication</id><content type="html" xml:base="https://pennymac.github.io/cli-aws-saml-authentication">At PennyMac, we use OneLogin as a single sign-on platform for authenticating to third-party applications, three of which are Amazon Web Services accounts. Today, we're going to look at using a Python script that takes away the complexity of authenticating to AWS through OneLogin.

The link to the repository is [here](https://gitlab.pnmac.com/windows/aws_saml_api). The instructions in the README are straightforward. Clone the repository to your computer.

If you're on a Mac and have Homebrew installed, you're one command away from installing the [AWS CLI](https://aws.amazon.com/cli/):

```shell
$  brew install awscli
```

Go to the repository and run the Python script `aws_cli_sso_via_vco.py` and pass `dev` as the first argument. Here `dev` is the AWS development account you'll be authenticating against:

```shell
$  python aws_cli_sso_via_vco.py dev
```

Running that script will produce the following output:

```shell
Username: your-username-here
Password:
Getting SAML assertion. Please wait. . .


----------------------------------------------------------------
Your new access key pair has been stored in the AWS configuration file /Users/your-username-here/.aws/credentials under the dev profile.
Note that it will expire at 2017-03-30T18:03:19Z.
After this time you may safely rerun this script to refresh your access key pair.
To use this credential call the AWS CLI with the --profile option (e.g. aws --profile dev ec2 describe-instances).
----------------------------------------------------------------


Testing new creds:  passed
```

&gt; **Note** _You'll have to regularly run this script (every hour), in order to maintain a fresh set of valid credentials._

As the script mentions, you can try out the AWS CLI with a simple command:

```shell
$  aws --profile dev ec2 describe-instances
```

Note the reappearance of `dev` here as the argument to the `--profile` switch. If you want to avoid having to keep track of remembering to specify `dev` as the profile, you can export the `AWS_PROFILE` variable or add it to your `.bashrc` or `.zshrc`:

```shell
$  export AWS_PROFILE=dev
```

## Troubleshooting Notes

If your password contains a `&amp;`, you may have some difficulties logging in successfully.

If you already have a `credentials` file in the `~/.aws` folder, you'll also need to add a section at the bottom of the file:

```
[dev]
```

If you can't successfully authenticate, it's likely that you don't have access to the VCO server on port 8281. You'll want to open a ticket with ServiceNow and ask them for access to the VCO server. You can see the name of the server [here](https://gitlab.pnmac.com/windows/aws_saml_api/blob/master/aws_cli_sso_via_vco.py#L64).

If you still don't have access, you may need to request to be placed in the group that has access to the AWS development account. Again, open a ServiceNow ticket requesting this.</content><category term="aws" /><summary type="html">Go beyond the AWS console</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/MwRZqE1JuGs/500x300" /></entry><entry><title type="html">Automated Accessibility Testing</title><link href="https://pennymac.github.io/automated-accessibility-testing" rel="alternate" type="text/html" title="Automated Accessibility Testing" /><published>2017-03-09T00:00:00-08:00</published><updated>2017-03-09T00:00:00-08:00</updated><id>https://pennymac.github.io/automated-accessibility-testing</id><content type="html" xml:base="https://pennymac.github.io/automated-accessibility-testing">## Why automate accessibility testing?

There are a lot of rules when it comes to accessibility standards. Check out the [W3C Recommendation for WCAG 2.0](https://www.w3.org/TR/WCAG20/) and you'll see what I mean. There are some sites that have boiled these standards down to checklists and these, like the one at [The A11Y Project](http://a11yproject.com/checklist.html), are a good place to start to get a handle on what you need to do. But it would be tedious to go through the checklist for each of your pages and manually look through the code for each item.

In addition to checklists, there are also some ways to test your site online. One validator that I like is WAVE which you can [access from their website](http://wave.webaim.org/) or through the [WAVE Chrome extension](https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh?hl=en-US). These are great for a quick look, but don't have the ability to set different criteria, say between conformance levels AA and AAA.

I'm sure there are a huge number of ways out there to automatically test for accessibility. The one we'll be looking at uses [AccessSniff](https://github.com/yargalot/AccessSniff) and [HTML Codesniffer](https://github.com/squizlabs/HTML_CodeSniffer) along with a Grunt plugin called [grunt-accessibility](https://github.com/yargalot/grunt-accessibility). (Please note, if you are a Gulp fan, there is a [Gulp plugin](https://github.com/yargalot/gulp-accessibility) you can use instead, though that is beyond the scope of this tutorial.)

## How to set up a Grunt task to test your pages.

If you can run your website locally, this solution should work for you. I've tested it with a Jekyll static site and a Rails site so far. You can also test any pages already on the internet.

If you are not already set up with Node.js, npm and the grunt-cli, please follow the [instructions to get started with Grunt](http://gruntjs.com/getting-started).

Next, at the root of your project, if you don't already have one, add a `package.json` file with the following:

```json
{
  &quot;name&quot;: &quot;my-project-name&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;main&quot;: &quot;Gruntfile.js&quot;,
  &quot;devDependencies&quot;: {
    &quot;grunt&quot;: &quot;^1.0.1&quot;,
    &quot;grunt-accessibility&quot;: &quot;^5.0.0&quot;
  }
}
```
Customize the name and version number of your project.

Then if you don't already have one, add a `Gruntfile.js` at the root of your project with the following:

```javascript
module.exports = function(grunt) {

  grunt.initConfig({

    accessibility: {
      options: {
        // Levels are WCAG2A, WCAG2AA, WCAG2AAA, and Section508
        accessibilityLevel: &quot;WCAG2AAA&quot;,
        browser: true,
        // reportType: &quot;json&quot;,
        // reportLocation: &quot;reports&quot;,
        reportLevels: {
          notice: false,
          warning: false,
          error: true
        },
        ignore: [
          // &quot;WCAG2AAA.Principle1.Guideline1_4.1_4_6.G17&quot;
        ]
      },
      test: {
        options: {
          urls: [
            &quot;http://localhost:3000/&quot;,
            &quot;http://localhost:3000/users/sign_in&quot;
          ]
        }
      }
    }

  });


  grunt.loadNpmTasks(&quot;grunt-accessibility&quot;);

  grunt.registerTask(&quot;default&quot;, [&quot;accessibility&quot;]); 

};
```
You can change the `assessibilityLevel` to any of the following:
 - WCAG2A
 - WCAG2AA
 - WCAG2AAA
 - Section508

Change the `urls` listed to the ones you want to check locally.

Also, if you uncomment the `reportType` and `reportLocation`, your tests will print the results in both the console and in a file called `report.json` located in the `reports` folder.

You can uncomment the rule under `ignore` or add others to skip certain rules. This might be helpful for instance if you are getting a lot of contrast errors and want to filter them out until you get everything else passing.

You can [check out the documentation](https://github.com/yargalot/AccessSniff) to further configure your options.

Add `node_modules/` to your `.gitignore` file, and run the following to install your necessary modules:
```shell
$  npm install
```

Have your site running in one tab of your command line console, and in the other tab, run:

```shell
$  grunt accessibility --force
```

And that's all there is to it! You should see a print out in the terminal of your error messages. Here's one, I expect you'll see a lot of if you are using the WCAG2AAA standards:

```shell
ERROR WCAG2AAA.Principle1.Guideline1_4.1_4_6.G17.Fail
Line:193 Col:19
This element has insufficient contrast at this conformance level. Expected a contrast ratio of at least 7:1, but text in this element has a contrast ratio of 5.75:1. Recommendation: change text colour to #0656b1.
```

## What it doesn't do.

While automated testing is nice, it can't do everything for you. It can't test your site using a screen reader or keyboard only. And it can't check what your site looks like for different types of color blindness. (Here's [a Chrome extension](https://chrome.google.com/webstore/detail/i-want-to-see-like-the-co/jebeedfnielkcjlcokhiobodkjjpbjia) that can help with that.)

At least for now, we will probably need a combination of checklists, automated testing and human testing.</content><category term="accessibility" /><category term="testing" /><summary type="html">You can set up a Grunt task to check for different levels of accessibility.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/JVSgcV8_vb4/500x300" /></entry><entry><title type="html">How to Make a Skip Link</title><link href="https://pennymac.github.io/how-to-make-a-skip-link" rel="alternate" type="text/html" title="How to Make a Skip Link" /><published>2017-03-01T00:00:00-08:00</published><updated>2017-03-01T00:00:00-08:00</updated><id>https://pennymac.github.io/how-to-make-a-skip-link</id><content type="html" xml:base="https://pennymac.github.io/how-to-make-a-skip-link">## What's a Skip Link?

Some website visitors only use their keyboard or a switch device to navigate sites. In order for them to navigate to a link or a form field in the main part of your website, they often have to tab through a ton of content in your header, usually all your menu links. 

But there's an easy way you can allow them fewer clicks to get where they want to go. You can add a *skip link*.

{% youtube rD3db6-vmuo %}
The above video is part of a free [Web Accessibility course](https://www.udacity.com/course/web-accessibility--ud891) on Udacity created by Google.

## Specs

A skip link should only be visible on your page when a user clicks the `tab` key for the first time after the page is loaded. And if the user then clicks the `enter/return` key while this link is in focus, it will take them to the main part of the page and the next time they click the `tab` key they will be focused on the next focusable element in the main part of your page instead of in your header.

## How To

Let's say your page markup looks something like this:

```html
{% raw %}&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    ...
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header role=&quot;navigation&quot;&gt;
      ...
    &lt;/header&gt;
    &lt;main role=&quot;main&quot;&gt;
      ...
    &lt;/main&gt;
    &lt;footer role=&quot;navigation&quot;&gt;
      ...
    &lt;/footer&gt;
  &lt;/body&gt;
&lt;/html&gt;{% endraw %}
```

First you'll need to add an anchor link somewhere after the opening `body` tag and before your first focusable content that will link to the element with a `main` id:

```html
&lt;a id=&quot;skip-to-main-link&quot; href=&quot;#main&quot; class=&quot;sr-only sr-only-focusable&quot;&gt;Skip to main content.&lt;/a&gt;
```

You may have to experiment a little with the best place to put this link. Right after the opening `body` tag would be the easiest location but you may have to put it inside your header before the menu links begin.

Next, add `id=&quot;main&quot;` and `tabindex=&quot;-1&quot;` attributes to your `main` opening tag (or whatever element you consider the beginning of your main content) so now your markup looks like:

```html
{% raw %}&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    ...
  &lt;/head&gt;
  &lt;body&gt;
    &lt;a id=&quot;skip-to-main-link&quot; href=&quot;#main&quot; class=&quot;sr-only sr-only-focusable&quot;&gt;Skip to main content.&lt;/a&gt;
    &lt;header role=&quot;navigation&quot;&gt;
      ...
    &lt;/header&gt;
    &lt;main role=&quot;main&quot; id=&quot;main&quot; tabindex=&quot;-1&quot;&gt;
      ...
    &lt;/main&gt;
    &lt;footer role=&quot;navigation&quot;&gt;
      ...
    &lt;/footer&gt;
  &lt;/body&gt;
&lt;/html&gt;{% endraw %}
```

If you are using [Bootstrap v4](https://v4-alpha.getbootstrap.com) in your project, that should be all that's necessary, otherwise add the following to your CSS so that your skip link will only be visible when it's in focus:

```css
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.sr-only-focusable:active, .sr-only-focusable:focus {
  position: static;
  width: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  clip: auto;
}
```

I've added a skip link to this site, so you can go ahead and try it out on this page. Although there's only one link in the menu bar at this point, I have a bunch of social share links on the post pages that you'd have to tab through without the skip link.

## Resources

You can [read more about skip links](http://webaim.org/techniques/skipnav/) in this article on the Web AIM site.

[https://developers.google.com/web/updates/2016/03/focus-start-point?hl=en](https://developers.google.com/web/updates/2016/03/focus-start-point?hl=en)</content><category term="html" /><category term="css" /><category term="accessibility" /><summary type="html">This shows one way to make your site easier to navigate by keyboard.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/DErxVSSQNdM/500x300" /></entry><entry><title type="html">How to Contribute to LevelUp</title><link href="https://pennymac.github.io/how-to-contribute-to-levelup" rel="alternate" type="text/html" title="How to Contribute to LevelUp" /><published>2017-01-27T00:00:00-08:00</published><updated>2017-01-27T00:00:00-08:00</updated><id>https://pennymac.github.io/how-to-contribute-to-levelup</id><content type="html" xml:base="https://pennymac.github.io/how-to-contribute-to-levelup">## Getting Started
If this is the first time you've posted, you'll need to install Jekyll and download the repo.
 
### Check the Requirements
First, you'll need the following installed on your dev environment:
 - [Ruby](https://www.ruby-lang.org/en/downloads/) (including development headers, v2.3.1)
 - [RubyGems](https://rubygems.org/pages/download)
 - Linux, Unix, or Mac OS X
 - [GCC](https://gcc.gnu.org/install/) and [Make](https://www.gnu.org/software/make/) (in case your system doesn't have them installed, which you can check by running `gcc -v` and `make -v` in your system's command line interface)


### Download the Repo

Run:
```shell
$  git clone git@github.com:pennymac/levelup.git
$  cd levelup
$  rvm --ruby-version use 2.3.1@levelup --create # optional, if you use RVM
$  bundle
$  git checkout -b post/my-awesome-post-title # create a branch off of master
$  jekyll liveserve --incremental --baseurl ''
```

At this point you can go to `http://localhost:4000/` in your browser to see the site.

### Create a post

Make a new Markdown file in the `_posts` directory named according to the following format, where `YEAR` is a four-digit number and `MONTH` and `DAY` are both two-digit numbers:

```
YEAR-MONTH-DAY-title.md
```
 For example, these are the two I've created so far:

```
2017-01-18-create-a-jekyll-blog.md
2017-01-27-how-to-contribute-to-levelup.md
```

### YAML Front Matter

The first thing in your new file will be YAML front matter set between triple-dashed lines. Here's the what I'm using on the current post:

```
{% raw %}---
layout: post
title: How to Contribute to LevelUp
date:   2017-01-27
image: https://source.unsplash.com/N7XodRrbzS0/500x300
author_name: Jackie Johnston
author_image: https://s.gravatar.com/avatar/ceffcbfa4a2c365c07e91177db9b618c?s=300
author_url: https://pennymac.github.io/levelup/jackiejohnston
excerpt: This is a quick walk-through on how to create a post for this site.
tags: [jekyll, markdown, yaml]
---{% endraw %}
```
You will obviously change all the values here except for the first one which you'll leave as `post`. The `image`, `author_image` and `author_url` are all optional. Please use external urls for the `image` and `author_image`. If you are looking for an image, I recommend one of the laptop images at [Unsplash](https://unsplash.com/search/laptop). Find a photo you like, and when you click to zoom in on it you should find a photo ID in the url. If the url says `https://unsplash.com/search/laptop?photo=It0DCaCBr40`, then `It0DCaCBr40` is the ID. Just substitute that ID into the URL displayed in the front matter above, so it'll be `https://source.unsplash.com/It0DCaCBr40/500x300`. If you don't have a website you'd like to link to, you can create an author page on this site to use as your website URL. Take a look at [the one I've created](https://pennymac.github.io/levelup/jackiejohnston) as an example.

### Write your post

You are now ready to compose your post using [Markdown](https://guides.github.com/features/mastering-markdown/). You can use fenced code blocks for syntax highlighting like so:


    ```ruby
    def show
      @widget = Widget(params[:id])
      respond_to do |format|
        format.html # show.html.erb
        format.json { render json: @widget }
      end
    end
    ```

Which will output to:

```ruby
def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end
``` 

Here's a [list of supported languages](https://github.com/jneen/rouge/wiki/List-of-supported-languages-and-lexers) that you can use.

### Adding Photos &amp; Videos

To add a responsive image like the following:

![Laptop computer on desk]({{ '/assets/images/desktop.jpg' | relative_url }}){:class=&quot;img-responsive&quot;}

Just add the photo to the `assets/images` directory and use the following tag in your post:

```markdown{% raw %}
![Image alt text here.]({{ '/assets/images/desktop.jpg' | relative_url }}){:class=&quot;img-responsive&quot;}
{% endraw %}```

To embed a YouTube video like the following:

{% youtube FOfIoCi9uTI %}

First get the video id. It will be everything after the `v=`. So for `youtube.com/watch?v=FOfIoCi9uTI` the id is `FOfIoCi9uTI`. Then add it to a Liquid tag like:

```liquid{% raw %}
{% youtube FOfIoCi9uTI %}
```{% endraw %}

If instead you have a Vimeo video, take the id from the URL, such as `vimeo.com/22439234` and add to a Vimeo Liquid tag:

```liquid{% raw %}
{% vimeo 170526921 %}
```{% endraw %}

to get this:

{% vimeo 170526921 %}


### Preview &amp; Build

You will be able to preview your blog post by running:

```shell
$  rake serve
```

Your post will be listed on the homepage with a link.

Once it looks perfect, run:

```shell
$  rake build
$  git add .
$  git commit -m &quot;Added new post&quot;
$  git push origin post/my-awesome-post-title
```

### Pull Request

Then go to the [repo](https://github.com/pennymac/levelup) and create a merge request.

Start blogging now!</content><category term="jekyll" /><category term="markdown" /><category term="yaml" /><summary type="html">This is a quick walk-through on how to create a post for this site.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/N7XodRrbzS0/500x300" /></entry><entry><title type="html">Create a Jekyll Blog</title><link href="https://pennymac.github.io/create-a-jekyll-blog" rel="alternate" type="text/html" title="Create a Jekyll Blog" /><published>2017-01-18T00:00:00-08:00</published><updated>2017-01-18T00:00:00-08:00</updated><id>https://pennymac.github.io/create-a-jekyll-blog</id><content type="html" xml:base="https://pennymac.github.io/create-a-jekyll-blog">## Check the Requirements
First, you'll need the following installed on your dev environment:
 - [Ruby](https://www.ruby-lang.org/en/downloads/) (including development headers, v1.9.3 or above)
 - [RubyGems](https://rubygems.org/pages/download)
 - Linux, Unix, or Mac OS X
 - [GCC](https://gcc.gnu.org/install/) and [Make](https://www.gnu.org/software/make/) (in case your system doesn't have them installed, which you can check by running `gcc -v` and `make -v` in your system's command line interface)

## Getting Started

Run:
```shell
$  gem install jekyll
$  jekyll new levelup # Substitute 'levelup' with the name of your project
$  cd levelup
$  git init # Initialize git repo
$  git add .
$  git commit -m &quot;Initial commit&quot;
## If you use RVM do the following:
$  ruby -v # Check your Ruby version 
$  rvm --ruby-version use 2.3.1@levelup --create # Substitute your Ruby version and gemset name
$  git add .
$  git commit -m &quot;Add RVM wrappers&quot;
```

 - Update Gemfile by changing `RUBY_VERSION` to `&quot;2.3.1&quot;` or whatever you are using.
 - Add `.DS_Store`, `.ruby-gemset`, `ruby-version` to `.gitignore`.
 - Add a `README.md` file if you want for your repo.
 - In the `_config.yml` file, add `- README.md` to list of files under `exclude`. (This will prevent Jekyll from adding them to the distribution folder.)
 - In the `_config.yml` file, remove `email`, `twitter_username`, and `github_username` lines since we won't be using those. Update the `title` and `description` lines, also add or update the following:

```yaml
baseline: /levelup # If you are using on GitHub pages this will be the name of your repo
url: https://pennymac.github.io/ # If you are using on GitHub pages you will have your username as the subdomain
lang: en
timezone: America/Los_Angeles
permalink: /:title # This is just one way to structure your links, 
```


## To turn on live updates
Add `gem &quot;hawkins&quot;` to the `:jekyll_plugins` of your` Gemfile`. Run:

```shell
$  gem install bundler # if necessary
$  bundle
$  jekyll liveserve --incremental --baseurl '' # We are changing the baseurl variable because it will be different when running locally versus on your GitHub pages
```

You might have to visit `127.0.0.1:35729` in your browser to get the message `LiveReload: Browser connected` in your terminal to kick off the live reloading. You should at this point be able to view your site at http://localhost:4000 and have the browser automatically refresh with any updates you make. (Note: If you make a change to the `_config.yml` file, you will have to stop with `ctrl-c` and restart with the `jekyll liveserve --incremental --baseurl ''` command to see the changes.)



## To overwrite the default theme.

 - Remove `theme: minima` from `_config.yml`. Learn more about this theme and how to customize it [here](https://github.com/jekyll/minima).
 - Remove or comment out `gem &quot;minima&quot;, &quot;~&gt; 2.0&quot;` from `Gemfile`.
 - Run:

```shell
$  bundle
$  rm about.md
$  mkdir _includes
$  touch _includes/head.html
$  touch _includes/header.html
$  touch _includes/footer.html
$  touch _includes/footer-script.html
$  mkdir _layouts
$  touch _layouts/default.html
$  touch _layouts/post.html
$  mkdir _sass
$  mkdir assets
$  mkdir assets/images
$  mkdir assets/stylesheets
$  mkdir assests/javascripts
$  touch assets/stylesheets/main.scss
$  mv index.md index.html
```

Change layout to `default` in `index.html`. Remove all page content, but home.

Add the following to your `_includes/head.html` file to add Bootstrap and custom CSS to all your `head` tags:

```html
{% raw %}
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;

&lt;title&gt;{% if page.title %}{{ page.title | escape }}{% else %}{{ site.title | escape }}{% endif %}&lt;/title&gt;
&lt;meta name=&quot;description&quot; content=&quot;{{ page.excerpt | default: site.description | strip_html | normalize_whitespace | truncate: 160 | escape }}&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;{{ '/assets/stylesheets/main.css' | relative_url }}&quot;&gt;
&lt;link rel=&quot;canonical&quot; href=&quot;{{ page.url | replace:'index.html','' | absolute_url }}&quot;&gt;
&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;{{ site.title | escape }}&quot; href=&quot;{{ '/feed.xml' | relative_url }}&quot;&gt;

&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
{% endraw %}
```


Add something like the following to your `_includes/header.html` file to add a simple navbar to the top of all your pages:
```html
{% raw %}
&lt;header class=&quot;navbar navbar-default&quot;&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;nav class=&quot;navbar-header&quot;&gt;
      &lt;a class=&quot;navbar-brand&quot; href=&quot;{{ '/' | relative_url }}&quot;&gt;
        &lt;img alt=&quot;LevelUp&quot; src=&quot;{{ '/assets/images/levelup-logo.svg' | relative_url }}&quot; height=&quot;50&quot;&gt;
      &lt;/a&gt;
    &lt;/nav&gt;
  &lt;/div&gt;
&lt;/header&gt;
{% endraw %}
```


Add the following to your `_includes/footer.html` file to create an RSS feed link at the bottom of all pages:
```html
{% raw %}
&lt;footer class=&quot;container text-center&quot;&gt;
  &lt;p&gt;Subscribe &lt;a href=&quot;{{ '/feed.xml' | relative_url }}&quot;&gt;via RSS&lt;/a&gt;&lt;/p&gt;
&lt;/footer&gt;
{% endraw %}
```


Add the following to your `_includes/footer-script.html` file to add jQuery and BootstrapJS to all your pages:

```html
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot; integrity=&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
```

Add the following to your `_layouts/default.html` file:

```html
{% raw %}
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;{{ page.lang | default: site.lang | default: 'en' }}&quot;&gt;
  &lt;head&gt;
    {% include head.html %}
  &lt;/head&gt;
  &lt;body&gt;
    {% include header.html %}
    &lt;div class=&quot;container&quot;&gt;
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-sm-8 col-sm-offset-2&quot;&gt;
          {{ content }}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    {% include footer.html %}
    {% include footer-script.html %}
  &lt;/body&gt;
&lt;/html&gt;
{% endraw %}
```

Add the following to your `_layouts/post.html` file:
```html
{% raw %}
---
layout: default
---
&lt;article itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&gt;

  &lt;header class=&quot;text-center&quot;&gt;
    &lt;h1 itemprop=&quot;name headline&quot;&gt;{{ page.title }}&lt;small&gt;{% if page.author %} by &lt;span itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;{{ page.author }}&lt;/span&gt;&lt;/span&gt;{% endif %}&lt;/small&gt;&lt;/h1&gt;
    &lt;p&gt;&lt;time datetime=&quot;{{ page.date | date_to_xmlschema }}&quot; itemprop=&quot;datePublished&quot;&gt;{{ page.date | date: &quot;%B %-d, %Y&quot; }}&lt;/time&gt;&lt;/p&gt;
    &lt;hr&gt;
  &lt;/header&gt;

  &lt;div itemprop=&quot;articleBody&quot;&gt;
    {{ content }}
  &lt;/div&gt;

&lt;/article&gt;
{% endraw %}
```

Change the content of your `index.html` file to the following in order to show a listing of your blog posts:

```html
{% raw %}
---
title: LevelUp
layout: default
---

{% for post in site.posts %}
  &lt;small&gt;{{ post.date | date: &quot;%B %-d, %Y&quot; }}&lt;/small&gt;
  &lt;h4&gt;&lt;a href=&quot;{{ post.url | relative_url }}&quot;&gt;{{ post.title }}&lt;/a&gt; &lt;small&gt;{% if post.author %} by {{ post.author }}{% endif %}&lt;/small&gt;&lt;/h3&gt;
  &lt;p&gt;{{ post.excerpt }} &lt;a href=&quot;{{ post.url | relative_url }}&quot;&gt;Read more &amp;hellip;&lt;/a&gt;&lt;/p&gt;
  {% unless forloop.last == true %}
    &lt;hr&gt;
  {% endunless %}
{% endfor %}
{% endraw %}
```

Finally, change the autogenerated post in your `_posts` folder to whatever you'd like to start blogging about. The section below will help if you want to discuss code in your posts.

## Add Code Syntax Highlighting

```shell
$  gem install rouge
$  rougify help style # This will list available themes
$  rougify style monokai.sublime &gt; _sass/_syntax-highlighting.scss # substitute your favorite for monokai.sublime
```

Add an `assets/stylesheets/main.scss` file and add the following to it:

```scss
---
---
@charset &quot;utf-8&quot;;
@import
  &quot;syntax-highlighting&quot;
;
```

Now armed with a [list of supported languages](https://github.com/jneen/rouge/wiki/List-of-supported-languages-and-lexers) you will then be able to wrap your code blocks in Liquid tags like so:

```liquid
{% raw %}{% highlight ruby %}
def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end
{% endhighlight %}{% endraw %}
```

or on Markdown pages you can also use fenced code blocks like so:


    ```ruby
    def show
      @widget = Widget(params[:id])
      respond_to do |format|
        format.html # show.html.erb
        format.json { render json: @widget }
      end
    end
    ```

Which will output your highlighted code block like so:

```ruby
def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end
``` 

## Hosting on GitHub pages

All you have to do to host your site on GitHub pages is to run a build of your site and then push the contents of your `_site` directory to your `gh-pages` branch. Run:

```shell
$  jekyll build
$  git subtree push --prefix _site origin gh-pages
```

## More Info

If you would like to skip all the above and just snag the code for this website up to this point, pull the `phase1` branch of this repo.

Visit [Jekyll docs](http://jekyllrb.com/docs) for more info.</content><category term="jekyll" /><category term="liquid" /><category term="markdown" /><category term="yaml" /><summary type="html">This post will help you set up a very basic Jekyll blog website and host it on GitHub Pages.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://source.unsplash.com/lRssALOk1fU/500x300" /></entry></feed>
